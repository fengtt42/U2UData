// Generated by gencpp from file airsim_ros_pkgs/Environment.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_PKGS_MESSAGE_ENVIRONMENT_H
#define AIRSIM_ROS_PKGS_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geographic_msgs/GeoPoint.h>
#include <geometry_msgs/Vector3.h>

namespace airsim_ros_pkgs
{
template <class ContainerAllocator>
struct Environment_
{
  typedef Environment_<ContainerAllocator> Type;

  Environment_()
    : header()
    , position()
    , geo_point()
    , gravity()
    , air_pressure(0.0)
    , temperature(0.0)
    , air_density(0.0)  {
    }
  Environment_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position(_alloc)
    , geo_point(_alloc)
    , gravity(_alloc)
    , air_pressure(0.0)
    , temperature(0.0)
    , air_density(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _geo_point_type;
  _geo_point_type geo_point;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gravity_type;
  _gravity_type gravity;

   typedef float _air_pressure_type;
  _air_pressure_type air_pressure;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _air_density_type;
  _air_density_type air_density;





  typedef boost::shared_ptr< ::airsim_ros_pkgs::Environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros_pkgs::Environment_<ContainerAllocator> const> ConstPtr;

}; // struct Environment_

typedef ::airsim_ros_pkgs::Environment_<std::allocator<void> > Environment;

typedef boost::shared_ptr< ::airsim_ros_pkgs::Environment > EnvironmentPtr;
typedef boost::shared_ptr< ::airsim_ros_pkgs::Environment const> EnvironmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros_pkgs::Environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros_pkgs::Environment_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::Environment_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position == rhs.position &&
    lhs.geo_point == rhs.geo_point &&
    lhs.gravity == rhs.gravity &&
    lhs.air_pressure == rhs.air_pressure &&
    lhs.temperature == rhs.temperature &&
    lhs.air_density == rhs.air_density;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros_pkgs::Environment_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::Environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros_pkgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::Environment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::Environment_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c546730bd6237a77064d600afdebc59a";
  }

  static const char* value(const ::airsim_ros_pkgs::Environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc546730bd6237a77ULL;
  static const uint64_t static_value2 = 0x064d600afdebc59aULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros_pkgs/Environment";
  }

  static const char* value(const ::airsim_ros_pkgs::Environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Vector3 position\n"
"geographic_msgs/GeoPoint geo_point\n"
"geometry_msgs/Vector3 gravity\n"
"float32 air_pressure\n"
"float32 temperature\n"
"float32 air_density\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::airsim_ros_pkgs::Environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position);
      stream.next(m.geo_point);
      stream.next(m.gravity);
      stream.next(m.air_pressure);
      stream.next(m.temperature);
      stream.next(m.air_density);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros_pkgs::Environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros_pkgs::Environment_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "geo_point: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_point);
    s << indent << "gravity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gravity);
    s << indent << "air_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.air_pressure);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "air_density: ";
    Printer<float>::stream(s, indent + "  ", v.air_density);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_PKGS_MESSAGE_ENVIRONMENT_H
