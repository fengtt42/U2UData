// Generated by gencpp from file airsim_ros_pkgs/CarControls.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_PKGS_MESSAGE_CARCONTROLS_H
#define AIRSIM_ROS_PKGS_MESSAGE_CARCONTROLS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace airsim_ros_pkgs
{
template <class ContainerAllocator>
struct CarControls_
{
  typedef CarControls_<ContainerAllocator> Type;

  CarControls_()
    : header()
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)
    , handbrake(false)
    , manual(false)
    , manual_gear(0)
    , gear_immediate(false)  {
    }
  CarControls_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)
    , handbrake(false)
    , manual(false)
    , manual_gear(0)
    , gear_immediate(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _steering_type;
  _steering_type steering;

   typedef uint8_t _handbrake_type;
  _handbrake_type handbrake;

   typedef uint8_t _manual_type;
  _manual_type manual;

   typedef int8_t _manual_gear_type;
  _manual_gear_type manual_gear;

   typedef uint8_t _gear_immediate_type;
  _gear_immediate_type gear_immediate;





  typedef boost::shared_ptr< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> const> ConstPtr;

}; // struct CarControls_

typedef ::airsim_ros_pkgs::CarControls_<std::allocator<void> > CarControls;

typedef boost::shared_ptr< ::airsim_ros_pkgs::CarControls > CarControlsPtr;
typedef boost::shared_ptr< ::airsim_ros_pkgs::CarControls const> CarControlsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros_pkgs::CarControls_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros_pkgs::CarControls_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::CarControls_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.steering == rhs.steering &&
    lhs.handbrake == rhs.handbrake &&
    lhs.manual == rhs.manual &&
    lhs.manual_gear == rhs.manual_gear &&
    lhs.gear_immediate == rhs.gear_immediate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros_pkgs::CarControls_<ContainerAllocator1> & lhs, const ::airsim_ros_pkgs::CarControls_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros_pkgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2cf7bae5e8a409a1c310bfb0435ad4b6";
  }

  static const char* value(const ::airsim_ros_pkgs::CarControls_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2cf7bae5e8a409a1ULL;
  static const uint64_t static_value2 = 0xc310bfb0435ad4b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros_pkgs/CarControls";
  }

  static const char* value(const ::airsim_ros_pkgs::CarControls_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float32 throttle\n"
"float32 brake\n"
"float32 steering\n"
"bool handbrake\n"
"bool manual\n"
"int8 manual_gear\n"
"bool gear_immediate\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::airsim_ros_pkgs::CarControls_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.steering);
      stream.next(m.handbrake);
      stream.next(m.manual);
      stream.next(m.manual_gear);
      stream.next(m.gear_immediate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarControls_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros_pkgs::CarControls_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros_pkgs::CarControls_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "handbrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.handbrake);
    s << indent << "manual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manual);
    s << indent << "manual_gear: ";
    Printer<int8_t>::stream(s, indent + "  ", v.manual_gear);
    s << indent << "gear_immediate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_immediate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_PKGS_MESSAGE_CARCONTROLS_H
